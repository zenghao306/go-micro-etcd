// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: general_recall_server.proto

package general_recall_server

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/asim/go-micro/v3/api"
	client "github.com/asim/go-micro/v3/client"
	server "github.com/asim/go-micro/v3/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for GeneralRecallService service

func NewGeneralRecallServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for GeneralRecallService service

type GeneralRecallService interface {
	RecallResult(ctx context.Context, in *RecallResultReq, opts ...client.CallOption) (*RecallResultRsp, error)
	RecallReloadRStrategy(ctx context.Context, in *GeneralReloadRStrategyReq, opts ...client.CallOption) (*GeneralReloadRStrategyRsp, error)
	RecallReloadRSSubStrategy(ctx context.Context, in *GeneralReloadRSSubtrategyReq, opts ...client.CallOption) (*GeneralReloadRSSubStrategyRsp, error)
}

type generalRecallService struct {
	c    client.Client
	name string
}

func NewGeneralRecallService(name string, c client.Client) GeneralRecallService {
	return &generalRecallService{
		c:    c,
		name: name,
	}
}

func (c *generalRecallService) RecallResult(ctx context.Context, in *RecallResultReq, opts ...client.CallOption) (*RecallResultRsp, error) {
	req := c.c.NewRequest(c.name, "GeneralRecallService.RecallResult", in)
	out := new(RecallResultRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *generalRecallService) RecallReloadRStrategy(ctx context.Context, in *GeneralReloadRStrategyReq, opts ...client.CallOption) (*GeneralReloadRStrategyRsp, error) {
	req := c.c.NewRequest(c.name, "GeneralRecallService.RecallReloadRStrategy", in)
	out := new(GeneralReloadRStrategyRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *generalRecallService) RecallReloadRSSubStrategy(ctx context.Context, in *GeneralReloadRSSubtrategyReq, opts ...client.CallOption) (*GeneralReloadRSSubStrategyRsp, error) {
	req := c.c.NewRequest(c.name, "GeneralRecallService.RecallReloadRSSubStrategy", in)
	out := new(GeneralReloadRSSubStrategyRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for GeneralRecallService service

type GeneralRecallServiceHandler interface {
	RecallResult(context.Context, *RecallResultReq, *RecallResultRsp) error
	RecallReloadRStrategy(context.Context, *GeneralReloadRStrategyReq, *GeneralReloadRStrategyRsp) error
	RecallReloadRSSubStrategy(context.Context, *GeneralReloadRSSubtrategyReq, *GeneralReloadRSSubStrategyRsp) error
}

func RegisterGeneralRecallServiceHandler(s server.Server, hdlr GeneralRecallServiceHandler, opts ...server.HandlerOption) error {
	type generalRecallService interface {
		RecallResult(ctx context.Context, in *RecallResultReq, out *RecallResultRsp) error
		RecallReloadRStrategy(ctx context.Context, in *GeneralReloadRStrategyReq, out *GeneralReloadRStrategyRsp) error
		RecallReloadRSSubStrategy(ctx context.Context, in *GeneralReloadRSSubtrategyReq, out *GeneralReloadRSSubStrategyRsp) error
	}
	type GeneralRecallService struct {
		generalRecallService
	}
	h := &generalRecallServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&GeneralRecallService{h}, opts...))
}

type generalRecallServiceHandler struct {
	GeneralRecallServiceHandler
}

func (h *generalRecallServiceHandler) RecallResult(ctx context.Context, in *RecallResultReq, out *RecallResultRsp) error {
	return h.GeneralRecallServiceHandler.RecallResult(ctx, in, out)
}

func (h *generalRecallServiceHandler) RecallReloadRStrategy(ctx context.Context, in *GeneralReloadRStrategyReq, out *GeneralReloadRStrategyRsp) error {
	return h.GeneralRecallServiceHandler.RecallReloadRStrategy(ctx, in, out)
}

func (h *generalRecallServiceHandler) RecallReloadRSSubStrategy(ctx context.Context, in *GeneralReloadRSSubtrategyReq, out *GeneralReloadRSSubStrategyRsp) error {
	return h.GeneralRecallServiceHandler.RecallReloadRSSubStrategy(ctx, in, out)
}
